{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/pages/SingleComicPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","loading","request","error","clearError","useHttp","setLoading","useState","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","id","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","comic","_comic$textObjects$","_comic$textObjects$2","title","textObjects","text","pageCount","language","price","prices","getAllCharacters","offset","res","results","map","getCharacter","getAllComics","getComics","View","_ref","_jsxs","className","children","Link","to","SingleComicPage","comicId","useParams","setComic","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment"],"mappings":"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","file":"static/js/5.dbbb2ab5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: \"block\", width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} src={img} alt='error' />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=8baa8cdc56370685cb8a424e259bc4ba';\r\n    const _baseOffset = 210;\r\n    const _baseComicsOffset = 20;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseComicsOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComics = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.textObjects[0]?.text || 'There is no description',\r\n            pageCount: comic.pageCount ? `${comic.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            language: comic.textObjects[0]?.language || 'en-us',\r\n            price: comic.prices[0].price ? `${comic.prices[0].price}$` : 'not available',\r\n        }\r\n    }\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComics};\r\n}\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError};\r\n}","import {useParams, Link} from \"react-router-dom\";\r\nimport {useState, useEffect} from \"react\";\r\n\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from \"../../services/MarvelService\";\r\n\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n    const {comicId} = useParams();\r\n    const [comic, setComic] = useState(null);\r\n    const {loading, error, clearError, getComics} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateComic();\r\n        // eslint-disable-next-line\r\n    }, [comicId])\r\n\r\n    const updateComic = () => {\r\n        clearError();\r\n        getComics(comicId)\r\n            .then(onComicLoaded);\r\n    }\r\n\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n    }\r\n\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null;\r\n\r\n    return (\r\n       <>\r\n           {errorMessage}\r\n           {spinner}\r\n           {content}\r\n       </>\r\n    )\r\n}\r\n\r\nconst View = ({comic}) => {\r\n    const {title, description, pageCount, thumbnail, language, price} = comic;\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language: {language}</p>\r\n                <div className=\"single-comic__price\">{price}</div>\r\n            </div>\r\n            <Link to=\"..\" className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;"],"sourceRoot":""}